#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>

#define MAX_CHILDREN 5
#define BUFFER_SIZE 256

int num_children = 0;
pid_t children[MAX_CHILDREN];

void handle_interrupt(int sig) {
    printf("Interrupt signal received. Exiting...\n");
    for (int i = 0; i < num_children; i++) {
        kill(children[i], SIGTERM); // send termination signal to children
    }
    exit(0);
}

int main() {
    int fd[2];
    if (pipe(fd) == -1) {
        perror("pipe");
        return 1;
    }

    signal(SIGINT, handle_interrupt); // register interrupt handler

    while (num_children < MAX_CHILDREN) {
        pid_t child_pid = fork();
        if (child_pid == -1) {
            perror("fork");
            return 1;
        } else if (child_pid == 0) {
            // child process
            close(fd[1]); // close write end of pipe
            char buffer[BUFFER_SIZE];
            while (1) {
                ssize_t num_bytes = read(fd[0], buffer, BUFFER_SIZE);
                if (num_bytes <= 0) break; // end of file or error
                printf("Child %d received message: %.*s", getpid(), (int)num_bytes, buffer);
            }
            close(fd[0]); // close read end of pipe
            return 0;
        } else {
            // parent process
            children[num_children++] = child_pid;
        }
    }

    close(fd[0]); // close read end of pipe
    char buffer[BUFFER_SIZE];
    while (1) {
        printf("Enter message: ");
        fflush(stdout);
        ssize_t num_bytes = read(STDIN_FILENO, buffer, BUFFER_SIZE);
        if (num_bytes <= 0) break; // end of file or error
        buffer[num_bytes] = '\0';
        write(fd[1], buffer, num_bytes+1); // include null terminator
    }
    close(fd[1]); // close write end of pipe

    return 0;
}
